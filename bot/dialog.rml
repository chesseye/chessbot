open Wcs_message_t
open Context_types_t
open Util_bot
open Types
open Types_bot

let process get_value wcs_config
    (workspace_id: string)
    (text: ('b, string) event)
    (ctx_init: json)
    (txt_init: string)
    (value_of_context: message_response -> 'a option)
    : 'a process =
  let rec process loop_ ctx input =
    let req_msg =
      { req_input = { cin_text = input };
        req_alternate_intents = false;
        req_context = Some ctx;
        req_entities = None;
        req_intents = None;
        req_output = None; }
    in
    let resp =
      run Rml_async.proc_of_fun (Rest.message wcs_config workspace_id) req_msg
    in
    (* Format.printf "Chessbot: %s@." *)
    (*   (Wcs_message_j.string_of_c_output resp.rsp_output); *)
    List.iter
      (fun txt -> print_endline ("Chessbot: " ^ txt))
      resp.rsp_output.cout_text;
    begin match value_of_context resp with
    | Some v -> v
    | None ->
        await text(txt) in
        run loop_ resp.rsp_context txt
    end
  in
  run loop_ ctx_init txt_init


let process get_figure wcs_config text (color: color) ((i, j): int * int) : piece_type process =
  let ctx =
    json_of_string
      ("{ \"square\": \""^(string_of_square (i, j))^"\", "^
       "  \"color\" : \""^(string_of_color color)^"\" }")
  in
  let figure_of_resp resp =
    begin match context_of_json resp.rsp_context with
    | Some { ctx_figure = Some figure } ->
       Some (figure_of_string figure)
    | _ -> None
    end
  in
  run get_value wcs_config wcs_config.wcs_workspace_square_id text
    ctx "" figure_of_resp


let process get_casling_rights wcs_config text (color: color) =
  let ctx =
    json_of_string
      ("{ \"color\" : \""^(string_of_color color)^"\" }")
  in
  let castling_of_resp resp =
    begin match context_of_json resp.rsp_context with
    | Some { ctx_castling_rights = Some [b1; b2] } ->
        Some (b1, b2)
    | _ -> None
    end
  in
  run get_value wcs_config wcs_config.wcs_workspace_castling_id text
    ctx "" castling_of_resp

let process get_turn wcs_config text : color process =
  let ctx = json_of_string "null" in
  let turn_of_resp resp =
    begin match context_of_json resp.rsp_context with
    | Some { ctx_color = Some c } ->
        Some (color_of_string c)
    | _ -> None
    end
  in
  run get_value wcs_config wcs_config.wcs_workspace_turn_id text
    ctx "" turn_of_resp


let process position_of_mask wcs_config text (m : mask) =
  let board =
    let board = Array.make_matrix 8 8 Empty in
    for i = 0 to 7 do
      for j = 0 to 7 do
        begin match m.(i).(j) with
        | Some c ->
            let f = run get_figure wcs_config text c (i, j) in
            board.(i).(j) <- Piece (f, c)
        | None -> ()
        end
      done
    done;
    board
  in
  let cas_w =
    begin match get_king board White with
    | Some ij when ij = (4, 0) -> run get_casling_rights wcs_config text White
    | _ -> (false, false)
    end
  in
  let cas_b =
    begin match get_king board Black with
    | Some ij when ij = (4, 7) -> run get_casling_rights wcs_config text Black
    | _ -> (false, false)
    end
  in
  let turn =
    run get_turn wcs_config text
  in
  { ar = board;
    turn = turn;
    cas_w = cas_w;
    cas_b = cas_b;
    en_passant = None;
    prev = None;
    irr_change = 0;
    king_w =
      begin match get_king board White with
      | None -> (0,0)
      | Some p -> p
      end;
    king_b =
      begin match get_king board Black with
      | None -> (7,7)
      | Some p -> p
      end;
    number = 42;
    eval = 0; }


let process get_intent wcs_config text : intent_dispatch process =
  let ctx = json_of_string "null" in
  let turn_of_resp resp =
    begin match context_of_json resp.rsp_context with
    | Some { ctx_dispatch = Some s } ->
        Some (intent_dispatch_of_string s)
    | _ -> None
    end
  in
  await text(txt) in
  run get_value wcs_config wcs_config.wcs_workspace_intent_dispatch_id text
    ctx txt turn_of_resp


let rec process await_new_mask_diff mask m_init prev_diff =
  await mask (Some m) in
  begin match Util.diff_mask m_init m with
  | [ (square, None, Some c) ] as diff ->
      if diff = prev_diff then
        run await_new_mask_diff mask m_init prev_diff
      else
        (square, c)
  | _ -> run await_new_mask_diff mask m_init prev_diff
  end

let process get_piece wcs_config text mask m_init piece square =
  let rec process loop_ ctx input prev_diff =
    let req_msg =
      { req_input = { cin_text = input };
        req_alternate_intents = false;
        req_context = Some ctx;
        req_entities = None;
        req_intents = None;
        req_output = None; }
    in
    let resp =
      run Rml_async.proc_of_fun
        (Rest.message wcs_config wcs_config.wcs_workspace_piece_id)
        req_msg
    in
    List.iter
      (fun txt -> print_endline ("Chessbot: " ^ txt))
      resp.rsp_output.cout_text;
    begin match context_of_json resp.rsp_context with
    | Some { ctx_filled = Some _ } -> ()
    | _ ->
        do
          let square, color = run await_new_mask_diff mask m_init prev_diff in
          let ctx = resp.rsp_context in
          let ctx =
            context_add_string ctx "m_color" (string_of_color color)
          in
          let ctx =
            context_add_string ctx "m_square" (string_of_square square)
          in
          run loop_ ctx "" [ (square, None, Some color) ]
        until
        | text(txt) -> run loop_ resp.rsp_context txt prev_diff
        done
    end
  in
  let ctx_init =
    let figure, color = piece in
    json_of_string
      ("{ \"square\": \""^(string_of_square square)^"\", "^
       "  \"figure\": \""^(string_of_figure figure)^"\", "^
       "  \"color\" : \""^(string_of_color color)^"\" }")
  in
  run loop_ ctx_init "" []

let process mask_of_position wcs_config text mask pos =
  print_endline "Chessbot: The chessboard must be empty.";
  let m = Array.make_matrix 8 8 None in
  for i = 0 to 7 do
    for j = 0 to 7 do
      begin match pos.(i).(j) with
      | Piece (figure, color) ->
          run get_piece  wcs_config text mask m (figure, color) (i, j);
          m.(i).(j) <- Some color
      | Empty -> ()
      end
    done
  done
